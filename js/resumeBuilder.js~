

var work = {
    "jobs": [
        {
            "employer": "Funkyflick, Inc.",
            "title": "Project Manager",
            "location": "Santa Clara, CA",
            "dates": "07-01-2013 - present",
            "description": "My goals are to contribute to the success of FunkyFlick - Personalized movie search high-tech company by applying a varied set of experiences in Project Management and broad understanding of the web application structure. FunkyFlick offers unique services for finding movies based on your favorite book, TV show, movie or any wikipedia page."
        },
        {
            "employer": "Bridge to San Francisco, Inc.",
            "title": "Project Manager",
            "location": "San Francisco, CA",
            "dates": "04-01-2012 - 06-01-2013",
            "description": "As a Project Manager I was responsible for the successful planning, execution, monitoring, control and closure of the enterntainment project that took place at the Palace of Fine Arts, San Francisco in January 2013."
        }
    ]
};

var projects = {
    "projects": [
        {
            "title": "Funkyflick.com",
            "urls": "http://www.funkyflick.com",
            "dates": "07-01-2013 - present",
            "description": "Managed a group of web-developers and learned how to implement HTML, CSS and JavaScript into dynamic website.",
            "images": "images/funkyflick_modal.png"          
        },
        {
            "title": "Navyart.com",
            "urls" : "http://www.navyart.com",
            "dates": "Spring 2014",
            "description": "Designed a Navyart.com, the official website of the chief U.S. Navy artist Arthur Beaumont (1870-1978). This website was hand-coded in using Dreamweaver, HTML, CSS and JavaScript.",
            "images": 'images/navyart_modal.png'  
        },
        {
            "title": "Oxanaweb.com",
            "urls" : "http://www.oxanaweb.com",
            "dates": "October 2014",
            "description": "Designed my official website using HTML, Bootstrap framework, CSS and JavaScript.",
            "images": "images/oxanaweb_modal.png"  
        }    
    ]
};
  
var bio = {
    "name": "Oxana Web",
    "role": "Web Developer",
    "aboutme": "With my experience in start-ups project management, I feel I bring a unique perspective to front end development and user interface design. Each position I have held has transmuted my skillset and goals towards forward-thinking technology. I am obsessed with expanding my knowledge, solving challenging problems and staying on the bleeding edge.",
    "image" : "images/logo.png",
    "languages" : [
          "English",
          "Russian"
    ],
    "hobbies" : [
          "Traveling",
          "Tennis",
          "Cats"
    ],     
    "contacts": [
        {
            "mobileNumber": "415-724-9255",
            "email": "oxana@oxanaweb.com",
            "github": "oxflick",
            "location": "Santa Clara, CA"
        }
    ],
    "skills": [
        "Project Management",
        "HTML/CSS",
        "JavaScript",
        "Ruby on Rails",
        "MySQL"
    ]
}

var education = {
    "schools": [
        {
            "name": "Saratov State University",
            "location": "Saratov, Russian Federation",
            "degree": "Bachelor",
            "majors": "Economics",
            "dates": "2000-2005",
            "urls": "http://www.sgu.ru"
        }
    ],
    "onlineCourse": [
        {
            "title": "Front-End Development, UX Design, Ruby on Rails",
            "school": "Treehouse",
            "dates": "July 2014 - present",
            "urls": "http://www.teamtreehouse.com",
            
        },
        {
            "title": "Front-End Web Developer Nanodegree",
            "school": "Udacity",
            "dates": "October 2014 - present",
            "urls": "http://www.udacity.com"
        }
    ]
};

 //Skills Display
 
if (bio.skills.length > 0) {
   $("#skillsChart").append(HTMLskillsStart);
   
    var formattedSkill = HTMLskills.replace("%data%", bio.skills[0]);
    $("#skills").append(formattedSkill);
    formattedSkill = HTMLskills.replace("%data%", bio.skills[1]);
    $("#skills").append(formattedSkill);
    formattedSkill = HTMLskills.replace("%data%", bio.skills[2]);
    $("#skills").append(formattedSkill);
    formattedSkill = HTMLskills.replace("%data%", bio.skills[3]);
    $("#skills").append(formattedSkill);
    formattedSkill = HTMLskills.replace("%data%", bio.skills[4]);
    $("#skills").append(formattedSkill);
   
   };
   
   //Job Display
   
  function displaywork() { 
   for (job in work.jobs) {
   $("#workExperience").append(HTMLworkStart);
 
   var formattedEmployer = HTMLworkEmployer.replace("%data%", work.jobs[job].employer);
   var formattedTitle = HTMLworkTitle.replace("%data%", work.jobs[job].title);
   var formattedEmployerTitle = formattedEmployer + formattedTitle;
   $(".work-entry:last").append(formattedEmployerTitle);
  
   var formattedDates = HTMLworkDates.replace("%data%", work.jobs[job].dates);
   var formattedjobLocation = HTMLworkLocation.replace("%data%", work.jobs[job].location);
   var formattedDescription = HTMLworkDescription.replace("%data%", work.jobs[job].description);
   $(".work-entry:last").append(formattedDates);
   $(".work-entry:last").append(formattedjobLocation);
   $(".work-entry:last").append(formattedDescription);
  
  }
  }
  displaywork();
  
  
  //Projects Display
  
  projects.display = function () {
  
  for (project in projects.projects) {
  
   $("#projects").append(HTMLprojectStart);
  
   var formattedProjectTitle = HTMLprojectTitle.replace("%data%", projects.projects[project].title);
   $(".project-entry:last").append(formattedProjectTitle);
  
   var formattedProjectDates = HTMLprojectDates.replace("%data%", projects.projects[project].dates);
   $(".project-entry:last").append(formattedProjectDates);
  
   var formattedProjectDescription = HTMLprojectDescription.replace("%data%", projects.projects[project].description);
   $(".project-entry:last").append(formattedProjectDescription);
  
  
   var formattedProjectImage = HTMLprojectImage.replace("%data%", projects.projects[project].images);
   $(".project-entry:last").append(formattedProjectImage);
  
  
  
  }
  }
  projects.display();
  
  
 
  
  
  
  
  //Header name, role, picture, welcome message
  
  var formattedPicture = HTMLbioPic.replace("%data%", bio.image);
  $("#logo-header").append(formattedPicture);
  
  var formattedheaderText = HTMLheaderText.replace("%data%", bio.name).replace("%role%", bio.role);
  $("#logo-header").append(formattedheaderText);
 
  var formattedaboutMe = HTMLaboutMe.replace("%data%", bio.aboutme);
  $("#welcome").append(formattedaboutMe);
  
    
  //Top-Contacts
  
  function contactsdisplay () {
  
   for (contact in bio.contacts) {
  
   var formattedEmail = HTMLemail.replace("%data%", bio.contacts[contact].email);
   $("#topContacts").append(formattedEmail);
  
  
   var formattedLocation = HTMLlocation.replace("%data%", bio.contacts[contact].location);
   $("#topContacts").append(formattedLocation);
  
   var formattedMobile = HTMLmobile.replace("%data%", bio.contacts[contact].mobileNumber);
   $("#topContacts").append(formattedMobile);
  
   var formattedGithub = HTMLgithub.replace("%data%", bio.contacts[contact].github);
   $("#topContacts").append(formattedGithub);
  
  }
  }
  contactsdisplay();
  
  //Education Display
  
  function educationdisplay () {
  
   for (school in education.schools) {
   $("#education").append(HTMLschoolStart);
  
   var formattedschoolName = HTMLschoolName.replace("%data%", education.schools[school].name);
   $(".education-entry:last").append(formattedschoolName);
      
   var formattedschoolDegree = HTMLschoolDegree.replace("%data%", education.schools[school].degree);
   $(".education-entry:last").append(formattedschoolDegree);
  
   var formattedschoolDates = HTMLschoolDates.replace("%data%", education.schools[school].dates);
   $(".education-entry:last").append(formattedschoolDates);
  
   var formattedschoolMajor = HTMLschoolMajor.replace("%data%", education.schools[school].majors);
   $(".education-entry:last").append(formattedschoolMajor);
   
   var formattedschoolLocation = HTMLschoolLocation.replace("%data%", education.schools[school].location);
   $(".education-entry:last").append(formattedschoolLocation);
  
   var formattedschoolURL = HTMLschoolURL.replace("%data%", education.schools[school].urls);
   $(".education-entry:last").append(formattedschoolURL);

  }
  }
  educationdisplay(); 
  
  //Online Courses Display
  
  $(".education-entry:last").append(HTMLonlineClasses);
  
  function displayonlinecourses() { 
  for (course in education.onlineCourse) {
      
  var formattedonlineTitle =  HTMLonlineTitle.replace("%data%", education.onlineCourse[course].title);
  $(".education-entry:last").append(formattedonlineTitle);
  
  var formattedonlineSchool =  HTMLonlineSchool.replace("%data%", education.onlineCourse[course].school);
  $(".education-entry:last").append(formattedonlineSchool);
  
  var formattedonlineDates =  HTMLonlineDates.replace("%data%", education.onlineCourse[course].dates);
  $(".education-entry:last").append(formattedonlineDates);
   
  var formattedonlineUrl =  HTMLonlineURL.replace("%data%", education.onlineCourse[course].urls);
  $(".education-entry:last").append(formattedonlineUrl);
  
  }
  }
  displayonlinecourses();
  
  
  //Languages Display
 
  if (bio.languages.length > 0) {
   
  var formattedLanguage = HTMLlanguageItem.replace("%data%", bio.languages[0]);
  $("#languages").append(formattedLanguage);
  formattedLanguage = HTMLlanguageItem.replace("%data%", bio.languages[1]);
  $("#languages").append(formattedLanguage);
    
  };
   
  //Hobbies Display
 
  if (bio.hobbies.length > 0) {
   
  var formattedHobby = HTMLhobbyItem.replace("%data%", bio.hobbies[0]);
  $("#hobbies").append(formattedHobby);
  formattedHobby = HTMLhobbyItem.replace("%data%", bio.hobbies[1]);
  $("#hobbies").append(formattedHobby);
  formattedHobby = HTMLhobbyItem.replace("%data%", bio.hobbies[2]);
  $("#hobbies").append(formattedHobby);
    
  };
   
   
  //Building Map
  
  $("#mapDiv").append(googleMap);
  
  var map;   


  function initializeMap() {

   var locations;        

   var mapOptions = {
   zoomControl: true,
   disableDefaultUI: true
  };

  map = new google.maps.Map(document.querySelector('#map'), mapOptions);

  function locationFinder() {
       var locations = [];

      for (var biolocation in bio.contacts) {
      locations.push(bio.contacts[biolocation].location);
    }

    
    for (var school in education.schools) {
      locations.push(education.schools[school].location);
    }

    for (var job in work.jobs) {
      locations.push(work.jobs[job].location);
    }

    return locations;
  };

  /*
  createMapMarker(placeData) reads Google Places search results to create map pins.
  placeData is the object returned from search results containing information
  about a single location.
  */
  function createMapMarker(placeData) {

    // The next lines save location data from the search result object to local variables
    var lat = placeData.geometry.location.k;  // latitude from the place service
    var lon = placeData.geometry.location.B;  // longitude from the place service
    var name = placeData.formatted_address;   // name of the place from the place service
    var bounds = window.mapBounds;            // current boundaries of the map window

    // marker is an object with additional data about the pin for a single location
    var marker = new google.maps.Marker({
      map: map,
      position: placeData.geometry.location,
      title: name
    });
    
    // infoWindows are the little helper windows that open when you click
    // or hover over a pin on a map. They usually contain more information
    // about a location.
    var infoWindow = new google.maps.InfoWindow({
      content: name
    });

    // hmmmm, I wonder what this is about...
    google.maps.event.addListener(marker, 'click', function() {
      infoWindow.open(map, marker);
      });

    // this is where the pin actually gets added to the map.
    // bounds.extend() takes in a map location object
    bounds.extend(new google.maps.LatLng(lat, lon));
    // fit the map to the new marker
    map.fitBounds(bounds);
    // center the map
    map.setCenter(bounds.getCenter());
  };

  /*
  callback(results, status) makes sure the search returned results for a location.
  If so, it creates a new map marker for that location.
  */
  //function callback(results, status) {
   // if (status == google.maps.places.PlacesServiceStatus.OK) {
    //  createMapMarker(results[0])
   // }
 // }

 callback = function(results, status) {
    if (status == google.maps.places.PlacesServiceStatus.OK) {
      createMapMarker(results[0])
    }
  };




  /*
  pinPoster(locations) takes in the array of locations created by locationFinder()
  and fires off Google place searches for each location
  */
  function pinPoster(locations) {

    // creates a Google place search service object. PlacesService does the work of
    // actually searching for location data.
    var service = new google.maps.places.PlacesService(map);
    
    // Iterates through the array of locations, creates a search object for each location
    for (place in locations) {

      // the search request object
      var request = {
        query: locations[place]
      }

      // Actually searches the Google Maps API for location data and runs the callback 
      // function with the search results after each search.
      service.textSearch(request, callback);
    }
  };

  // Sets the boundaries of the map based on pin locations
  window.mapBounds = new google.maps.LatLngBounds();

  // locations is an array of location strings returned from locationFinder()
  locations = locationFinder();

  // pinPoster(locations) creates pins on the map for each location in
  // the locations array
  pinPoster(locations);
  
};

/*
Uncomment all the code below when you're ready to implement a Google Map!
*/

// Calls the initializeMap() function when the page loads
window.addEventListener('load', initializeMap);

// Vanilla JS way to listen for resizing of the window 
// and adjust map bounds
window.addEventListener('resize', function(e) {
  //Make sure the map bounds get updated on page resize
map.fitBounds(mapBounds);
});
 



















 
 
